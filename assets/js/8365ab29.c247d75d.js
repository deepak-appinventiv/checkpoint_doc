"use strict";(self.webpackChunkcheckpoint_doc=self.webpackChunkcheckpoint_doc||[]).push([[8765],{9063:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>o});const d=JSON.parse('{"id":"realtime/components/calendarComponent","title":"CustomCalendar","description":"The Calendar is a versatile date selection component built for application. It supports multiple date selection modes such as day, week, month, and year, with customizable options and integration with the react-native-calendars library.","source":"@site/docs/realtime/components/calendarComponent.mdx","sourceDirName":"realtime/components","slug":"/realtime/components/calendarComponent","permalink":"/realtime/components/calendarComponent","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/realtime/components/calendarComponent.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"realTimeSidebar","previous":{"title":"CustomLoader","permalink":"/realtime/components/customLoader"},"next":{"title":"WeatherCard","permalink":"/realtime/components/customWeatherCard"}}');var s=t(4848),c=t(8453);const r={},i="CustomCalendar",l={},o=[{value:"Usage",id:"usage",level:2},{value:"Basic Example",id:"basic-example",level:3},{value:"Props",id:"props",level:2},{value:"Features",id:"features",level:2},{value:"Customization",id:"customization",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Testing",id:"testing",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"customcalendar",children:"CustomCalendar"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Calendar"})," is a versatile date selection component built for application. It supports multiple date selection modes such as day, week, month, and year, with customizable options and integration with the ",(0,s.jsx)(n.code,{children:"react-native-calendars"})," library."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.h3,{id:"basic-example",children:"Basic Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import React from 'react';\nimport CustomCalendar from './CustomCalendar';\n\nconst App = () => {\n  const handleApplyFilter = (\n    selectedDate,\n    markedDates,\n    startDate,\n    endDate,\n    selectedMode,\n    selectedModeId\n  ) => {\n    console.log({\n      selectedDate,\n      markedDates,\n      startDate,\n      endDate,\n      selectedMode,\n      selectedModeId,\n    });\n  };\n\n  return (\n    <CustomCalendar\n      onPressButton={handleApplyFilter}\n      onPressClose={() => console.log('Closed')}\n      selectedDateDay=\"2024-12-25\"\n      selectedMarkedDates={{}}\n      selectedModeVal=\"Day\"\n      selectedModeId={{ title: 'Day' }}\n      maxDatee=\"2024-12-31\"\n    />\n  );\n};\n\nexport default App;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Prop Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"onPressButton"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"function"})}),(0,s.jsx)(n.td,{children:"Required"}),(0,s.jsx)(n.td,{children:"Callback function triggered when the apply button is pressed."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"onPressClose"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"function"})}),(0,s.jsx)(n.td,{children:"Required"}),(0,s.jsx)(n.td,{children:"Callback function triggered when the component is closed."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"selectedDateDay"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"''"})}),(0,s.jsxs)(n.td,{children:["Pre-selected day in the format ",(0,s.jsx)(n.code,{children:"YYYY-MM-DD"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"selectedMarkedDates"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Record<string, any>"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"{}"})}),(0,s.jsx)(n.td,{children:"Marked dates to prepopulate in the calendar."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"selectedModeVal"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"'Day'"})}),(0,s.jsxs)(n.td,{children:["Selected mode (",(0,s.jsx)(n.code,{children:"Day"}),", ",(0,s.jsx)(n.code,{children:"Week"}),", ",(0,s.jsx)(n.code,{children:"Month"}),", ",(0,s.jsx)(n.code,{children:"Year"}),")."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"selectedModeId"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"any"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"Selected mode details."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"formatDateFilter"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"function"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"Custom function for formatting dates."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"selectedStartDate"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"Start date for range selection."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"selectedEndDate"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"End date for range selection."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"maxDatee"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsxs)(n.td,{children:["Maximum selectable date in the format ",(0,s.jsx)(n.code,{children:"YYYY-MM-DD"}),"."]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multiple Selection Modes:"})," Supports ",(0,s.jsx)(n.code,{children:"Day"}),", ",(0,s.jsx)(n.code,{children:"Week"}),", ",(0,s.jsx)(n.code,{children:"Month"}),", and ",(0,s.jsx)(n.code,{children:"Year"})," modes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Marked Dates:"})," Highlights selected or marked dates with custom styles."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ChronoPicker Integration:"})," Easy navigation between different modes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Customizable:"})," Options to set maximum dates, custom styles, and callbacks for better control."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,s.jsx)(n.p,{children:"The component supports custom theming through props like:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"markedDates"}),": Customize the appearance of marked dates."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"selectedModeId"}),": Dynamically switch between modes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"maxDatee"}),": Restrict date selection beyond a specific range."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,s.jsx)(n.p,{children:"The component relies on the following dependencies:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"moment"}),": For date manipulation."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"react-native-calendars"}),": For calendar rendering."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@checkpoint/utils"}),", ",(0,s.jsx)(n.code,{children:"@checkpoint/primitives"}),", ",(0,s.jsx)(n.code,{children:"@checkpoint/localization/en"}),": For utilities, styling, and localization."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"CustomCalendar"})," is designed to be testable with pre-set props and callbacks. Example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'const mockOnPressButton = jest.fn();\nrender(\n  <CustomCalendar\n    onPressButton={mockOnPressButton}\n    selectedDateDay="2024-12-25"\n    selectedModeVal="Month"\n  />\n);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Trigger interactions and validate via ",(0,s.jsx)(n.code,{children:"mockOnPressButton"})," calls."]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var d=t(6540);const s={},c=d.createContext(s);function r(e){const n=d.useContext(c);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),d.createElement(c.Provider,{value:n},e.children)}}}]);