"use strict";(self.webpackChunkcheckpoint_doc=self.webpackChunkcheckpoint_doc||[]).push([[2993],{9299:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>a,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"quivio/components/bottomSheets/sheetWithFilters","title":"SheetWithFilters","description":"The SheetWithFilters component is a versatile React Native filter interface that allows users to select and apply multiple filters from different categories. It features a two-column layout with filter types and their corresponding options, along with reset and apply functionality.","source":"@site/docs/quivio/components/bottomSheets/sheetWithFilters.md","sourceDirName":"quivio/components/bottomSheets","slug":"/quivio/components/bottomSheets/sheetWithFilters","permalink":"/checkpoint_doc/quivio/components/bottomSheets/sheetWithFilters","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quivio/components/bottomSheets/sheetWithFilters.md","tags":[],"version":"current","frontMatter":{},"sidebar":"quivioSidebar","previous":{"title":"SheetWithCustomerFilters","permalink":"/checkpoint_doc/quivio/components/bottomSheets/sheetWithCustomerFilters"},"next":{"title":"ModuleFilterModal","permalink":"/checkpoint_doc/quivio/components/bottomSheets/sheetWithModulesFilters"}}');var i=n(4848),l=n(8453);const r={},o="SheetWithFilters",d={},c=[{value:"Usage",id:"usage",level:2},{value:"Props",id:"props",level:2},{value:"Types",id:"types",level:2},{value:"Features",id:"features",level:2},{value:"1. Two-Column Layout",id:"1-two-column-layout",level:3},{value:"2. Selection Handling",id:"2-selection-handling",level:3},{value:"3. Responsive Design",id:"3-responsive-design",level:3},{value:"4. Empty State Handling",id:"4-empty-state-handling",level:3},{value:"5. Action Buttons",id:"5-action-buttons",level:3},{value:"Styling",id:"styling",level:2},{value:"Example: Pre-selected Filters",id:"example-pre-selected-filters",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Notes",id:"notes",level:2}];function h(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"sheetwithfilters",children:"SheetWithFilters"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"SheetWithFilters"})," component is a versatile React Native filter interface that allows users to select and apply multiple filters from different categories. It features a two-column layout with filter types and their corresponding options, along with reset and apply functionality."]}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:'import React from "react";\nimport SheetWithFilters from "./SheetWithFilters";\n\nconst MyComponent = () => {\n  const filterData = [\n    {\n      filter_type: "Department",\n      multiselect: true,\n      list: [\n        { id: "1", name: "Engineering" },\n        { id: "2", name: "Marketing" },\n      ],\n    },\n  ];\n\n  const handleSubmit = (selectedFilters) => {\n    console.log("Applied filters:", selectedFilters);\n  };\n\n  return (\n    <SheetWithFilters\n      label="Filters"\n      subLabel="Select filters"\n      _data={filterData}\n      onPressSubmit={handleSubmit}\n      onPressCross={() => {}}\n    />\n  );\n};\n'})}),"\n",(0,i.jsx)(t.h2,{id:"props",children:"Props"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Prop Name"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Required"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"_data"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"FilterType[]"})}),(0,i.jsx)(t.td,{children:"Yes"}),(0,i.jsx)(t.td,{children:"Array of filter categories and their options"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"label"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"string"})}),(0,i.jsx)(t.td,{children:"Yes"}),(0,i.jsx)(t.td,{children:"Main title of the filter sheet"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"subLabel"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"string"})}),(0,i.jsx)(t.td,{children:"Yes"}),(0,i.jsx)(t.td,{children:"Subtitle displayed below the main label"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"filters"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"FilterType[]"})}),(0,i.jsx)(t.td,{children:"No"}),(0,i.jsx)(t.td,{children:"Pre-selected filters"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"onPressCross"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"() => void"})}),(0,i.jsx)(t.td,{children:"Yes"}),(0,i.jsx)(t.td,{children:"Callback when close button is pressed"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"onPressReset"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"() => void"})}),(0,i.jsx)(t.td,{children:"Yes"}),(0,i.jsx)(t.td,{children:"Callback when reset button is pressed"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"onPressSubmit"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"(args) => void"})}),(0,i.jsx)(t.td,{children:"Yes"}),(0,i.jsx)(t.td,{children:"Callback when apply button is pressed"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"primaryButtonLabel"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"string"})}),(0,i.jsx)(t.td,{children:"No"}),(0,i.jsx)(t.td,{children:'Label for reset button (defaults to "RESET")'})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"secondaryButtonLabel"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"string"})}),(0,i.jsx)(t.td,{children:"No"}),(0,i.jsx)(t.td,{children:'Label for apply button (defaults to "APPLY")'})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"types",children:"Types"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"interface List {\n  id?: string;\n  key?: string;\n  name: string | number;\n}\n\ninterface FilterType {\n  filter_type: string;\n  multiselect: boolean;\n  list: List[];\n}\n\ninterface SelectedFilter {\n  filter_type: string;\n  multiselect: boolean;\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"features",children:"Features"}),"\n",(0,i.jsx)(t.h3,{id:"1-two-column-layout",children:"1. Two-Column Layout"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Left column displays filter categories"}),"\n",(0,i.jsx)(t.li,{children:"Right column shows options for the selected category"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"2-selection-handling",children:"2. Selection Handling"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Supports both single and multi-select filters"}),"\n",(0,i.jsx)(t.li,{children:"Visual feedback with checkboxes for selected items"}),"\n",(0,i.jsx)(t.li,{children:"Maintains selection state across category switches"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"3-responsive-design",children:"3. Responsive Design"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Adapts to tablet and phone layouts"}),"\n",(0,i.jsx)(t.li,{children:"Scrollable lists for both categories and options"}),"\n",(0,i.jsx)(t.li,{children:"Maximum height constraints for tablet view"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"4-empty-state-handling",children:"4. Empty State Handling"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Displays an empty state image and message when no options are available"}),"\n",(0,i.jsx)(t.li,{children:"Custom empty state message can be configured"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"5-action-buttons",children:"5. Action Buttons"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Reset button to clear all selections"}),"\n",(0,i.jsx)(t.li,{children:"Apply button to confirm selected filters"}),"\n",(0,i.jsx)(t.li,{children:"Close button to dismiss the sheet"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"styling",children:"Styling"}),"\n",(0,i.jsx)(t.p,{children:"The component uses a combination of custom styles and design system elements:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Custom fonts from ",(0,i.jsx)(t.code,{children:"@quivio/assets/fonts"})]}),"\n",(0,i.jsxs)(t.li,{children:["Color palette from ",(0,i.jsx)(t.code,{children:"@quivio/utils"})]}),"\n",(0,i.jsxs)(t.li,{children:["Responsive dimensions using ",(0,i.jsx)(t.code,{children:"vh"})," and ",(0,i.jsx)(t.code,{children:"screenHeight"})]}),"\n",(0,i.jsx)(t.li,{children:"Custom button components with gradient support"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"example-pre-selected-filters",children:"Example: Pre-selected Filters"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:'const MyFilterSheet = () => {\n  const initialFilters = [\n    {\n      filter_type: "Department",\n      list: [{ id: "1", name: "Engineering" }],\n    },\n  ];\n\n  return (\n    <SheetWithFilters\n      label="Department Filters"\n      subLabel="Select departments"\n      _data={filterData}\n      filters={initialFilters}\n      onPressSubmit={(filters) => console.log("Selected:", filters)}\n      onPressReset={() => console.log("Filters reset")}\n      onPressCross={() => console.log("Sheet closed")}\n      primaryButtonLabel="Clear All"\n      secondaryButtonLabel="Save"\n    />\n  );\n};\n'})}),"\n",(0,i.jsx)(t.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"React Native"}),"\n",(0,i.jsx)(t.li,{children:"@quivio/utils"}),"\n",(0,i.jsx)(t.li,{children:"@quivio/assets"}),"\n",(0,i.jsx)(t.li,{children:"@quivio/components"}),"\n",(0,i.jsx)(t.li,{children:"@quivio/primitives"}),"\n",(0,i.jsx)(t.li,{children:"@quivio/localization"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"notes",children:"Notes"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"The component maintains internal state for:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Currently selected filter category"}),"\n",(0,i.jsx)(t.li,{children:"Applied filters across all categories"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Filter selections are only applied when the submit button is pressed"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"The reset functionality clears all selections but keeps the sheet open"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["The component supports localization through the ",(0,i.jsx)(t.code,{children:"localString"})," utility"]}),"\n"]}),"\n"]})]})}function a(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(6540);const i={},l=s.createContext(i);function r(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);